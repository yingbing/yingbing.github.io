<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[薛映冰的代码狂躁症]]></title>
  <link href="http://yingbing.github.io/atom.xml" rel="self"/>
  <link href="http://yingbing.github.io/"/>
  <updated>2015-02-11T17:41:50+08:00</updated>
  <id>http://yingbing.github.io/</id>
  <author>
    <name><![CDATA[ICE]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[链表]]></title>
    <link href="http://yingbing.github.io/blog/2015/02/11/linked-list-in-c/"/>
    <updated>2015-02-11T17:08:00+08:00</updated>
    <id>http://yingbing.github.io/blog/2015/02/11/linked-list-in-c</id>
    <content type="html"><![CDATA[<h3>一、什么是链表</h3>

<p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。</p>

<p>结构如下图：  <br/>
<img src="http://yingbing.github.io/images/2015-02-11-linked-list-in-c/1.png" width="500"></p>

<p>附上wiki链接：<a href="http://en.wikipedia.org/wiki/Linked_list">Linked List</a>  (为什么发英文的呢，因为我看不懂)</p>

<!-- more -->


<h3>二、链表特点</h3>

<p>链表相对于数组链表的优点是，数组大小可变，插入、删除速度蛮快，但是查找的效率却不如数组链表。</p>

<p>结构上： <br/>
1、每一个元素都有指针next指向下一下元素 <br/>
2、最后一个元素的next为NULL <br/>
<img src="http://yingbing.github.io/images/2015-02-11-linked-list-in-c/2.png" width="500"></p>

<h3>三、链表操作</h3>

<p>1、删除 <br/>
<img src="http://yingbing.github.io/images/2015-02-11-linked-list-in-c/3.png" width="500"></p>

<p>2、插入 <br/>
<img src="http://yingbing.github.io/images/2015-02-11-linked-list-in-c/4.png" width="500"></p>

<h3>四、实现</h3>

<p>不说了，好累，上代码：</p>

<figure class='code'><figcaption><span>list.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ElementType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifndef _List_H</span>
</span><span class='line'><span class="cp">#define _List_H</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">PtrToNode</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">List</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">Position</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="nf">MakeEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsLast</span><span class="p">(</span><span class="n">Position</span> <span class="n">p</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Find</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">,</span> <span class="n">Position</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">DeleteList</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Header</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">First</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Advance</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="n">ElementType</span> <span class="nf">Retrieve</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">ElementType</span> <span class="n">Element</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>list.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &quot;fatal.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;list.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">FindPrevious</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">List</span> <span class="nf">MakeEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">L</span> <span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">DeleteList</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">L</span> <span class="o">=</span> <span class="p">(</span><span class="n">List</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">L</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">FatalError</span><span class="p">(</span><span class="s">&quot;Out of memory!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsEmpty</span><span class="p">(</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsLast</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">Find</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>  <span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">P</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Element</span> <span class="o">!=</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>      <span class="n">P</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">P</span><span class="p">,</span> <span class="n">TmpCell</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">P</span> <span class="o">=</span> <span class="n">FindPrevious</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">IsLast</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">L</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TmpCell</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">TmpCell</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">TmpCell</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">FindPrevious</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="o">-&gt;</span><span class="n">Element</span> <span class="o">!=</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>      <span class="n">P</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">,</span> <span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">TmpCell</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TmpCell</span> <span class="o">=</span> <span class="p">(</span><span class="n">Position</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">TmpCell</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">FatalError</span><span class="p">(</span><span class="s">&quot;Out of space!!!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">TmpCell</span><span class="o">-&gt;</span><span class="n">Element</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TmpCell</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">TmpCell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">DeleteList</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Position</span> <span class="n">P</span> <span class="p">,</span> <span class="n">Tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>  <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">P</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Tmp</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span> <span class="n">P</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">P</span> <span class="o">=</span> <span class="n">Tmp</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">Header</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">First</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">Position</span> <span class="nf">Advance</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ElementType</span> <span class="nf">Retrieve</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Element</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">List</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>  <span class="n">list</span><span class="o">-&gt;</span><span class="n">Element</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">list</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">Element</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>附上github代码地址：<a href="https://github.com/yingbing/DS-a-AA/tree/master/list">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定时器/计数器]]></title>
    <link href="http://yingbing.github.io/blog/2015/02/07/scm-timer-counter/"/>
    <updated>2015-02-07T17:20:57+08:00</updated>
    <id>http://yingbing.github.io/blog/2015/02/07/scm-timer-counter</id>
    <content type="html"><![CDATA[<h3>一、什么是定时器/计数器</h3>

<p>在51单片机中，定时器/计数器是用来实现定时功能，并且具有计数的功能，来实现对外部信号的计数。</p>

<!-- more -->


<h3>二、定时器/计数器有什么类型</h3>

<p>在51单片机中，分为软件定时器，不可编程硬件定时器，可编程定时器。 <br/>
<strong>软件定时</strong>：CPU每执行一条指令时，是需要固定时间的，所以，通过执行空指令可以达到延时的效果，这样子做的代价是占用CPU时间，所以一般很少这么做。</p>

<p><strong>不可编程硬件定时器</strong>：是由电路和硬件来完成定时功能的，一般采用基电路，外接定时部件（电阻和电容），通过改变电阻的阻值和电容的电容值来修改定时值，一量确定后件不能通过软件修改，这样子做的优点是不需要占用CPU时间。</p>

<p><strong>可编程定时器</strong>：通软件来确定定时值及其范围，可编程定时器功能强大，灵活性高。这是本文详细讲解的定时器。</p>

<h3>三、定时器的内部结构及工作原理</h3>

<p>8051单片机有定时器0（T0)和定时器1（T1）两个定时器。 <br/>
<strong>定时器0（T0)和定时器1（T1）</strong>是两个16位加法计算器。 <br/>
定时器0是由TH0和TH1两个8位计数器组成的，定时器1也是一样。</p>

<p>定时器内部还有以下寄存器：<br/>
8位的方式寄存器（TMOD) <br/>
8位控制寄存器（TCON) <br/>
选择定时器模式寄存器(C/T) <br/>
启动方式寄存器（GATE）<br/>
工作方式及发出启动信号寄存器（TR0或TR1）</p>

<p>内部结构如下图： <br/>
<img src="http://yingbing.github.io/images/2015-02-07-scm-timer-counter/1.jpg" width="500"></p>

<h3>四、定时器工作方式</h3>

<p>定时器的工作方式主要是通过THOD低4位是定时器0的工作方式控制位，高4位为定时器1的工作方式控制方式。均为M1M0</p>

<table>
<thead>
<tr>
<th style="text-align:center;">工作方式 </th>
<th style="text-align:center;"> M1 </th>
<th style="text-align:center;"> M0  </th>
<th style="text-align:left;"> 功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">0 </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 0  </td>
<td style="text-align:left;"> 13位计数器</td>
</tr>
<tr>
<td style="text-align:center;">1 </td>
<td style="text-align:center;"> 0 </td>
<td style="text-align:center;"> 1  </td>
<td style="text-align:left;"> 16位计数器</td>
</tr>
<tr>
<td style="text-align:center;">2 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:center;"> 0  </td>
<td style="text-align:left;"> 8位计数器，初值自动装入</td>
</tr>
<tr>
<td style="text-align:center;">3 </td>
<td style="text-align:center;"> 1 </td>
<td style="text-align:center;"> 1  </td>
<td style="text-align:left;"> T0分成两个8位计数器，T1停止工作</td>
</tr>
</tbody>
</table>


<h3>五、使用定时器</h3>

<figure class='code'><figcaption><span>timer_count.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;reg52.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="n">sbit</span> <span class="n">LED0</span> <span class="o">=</span> <span class="n">P1</span><span class="o">^</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">TMOD</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TH0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TL0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ET0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TR0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">EA</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">t0_delay</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">interrupt</span> <span class="mi">1</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TR0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TH0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">TL0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="n">LED0</span> <span class="o">=</span> <span class="o">~</span><span class="n">LED0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">TR0</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C语言 动态数组实现]]></title>
    <link href="http://yingbing.github.io/blog/2015/01/31/dynamic-array/"/>
    <updated>2015-01-31T20:17:49+08:00</updated>
    <id>http://yingbing.github.io/blog/2015/01/31/dynamic-array</id>
    <content type="html"><![CDATA[<h3>一、概述</h3>

<p>C语言是不能直接定义动态数组的，数组必须在初始化时确定长度。</p>

<p>如果要在程序运行时才确定数组的长度，就需要在运行的时候，自己去向系统申请一块内存用动态内存分配实现动态数组。</p>

<!--more-->


<h3>二、动态内存分配函数</h3>

<h4>1、malloc()函数</h4>

<pre><code>void *malloc(unsigned int size)
</code></pre>

<p>分配size个字节的内存空间，返回地址的指针，如果内存不够分，就返回空指针NULL。
注意：返回的指针是没有类型的，所以要使用得强制类型转换。</p>

<h4>2、calloc()函数</h4>

<pre><code>void *calloc(unsigned int num, unsigned int size)
</code></pre>

<p>这个也是申请动态内存空间，不过就是分开了而已。
一共申请num个长度为size字节的内存空间。</p>

<h4>3、free()函数</h4>

<pre><code>void free(void *p)
</code></pre>

<p>释放指针p内存空间。</p>

<h4>这个很重要！！！！很重要！！！重要！！！</h4>

<!-- 记住一根稻草也能压死马 -->


<h4>4、realloc()函数</h4>

<pre><code>void *realloc(void *p, unsigned int size)
</code></pre>

<p>给指针p申请的存储空间改为size个字节，返回的是存储空间首地址（指针）</p>

<h3>三、动态数组实现</h3>

<h4>1、一维动动数组实现</h4>

<figure class='code'><figcaption><span>dynamicArrayOneDimensional.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**************************************************</span>
</span><span class='line'><span class="cm">dynamicArrayOneDimensional.c</span>
</span><span class='line'><span class="cm">输入N个数，求平均数</span>
</span><span class='line'><span class="cm">**************************************************/</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Please enter array size:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* 申请地址n个长度为sizeof(int)的连续存储空间 */</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No enough memory!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Please enter the score:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="o">*</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;aver = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sum</span><span class="o">/</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2、二维动态数组的实现</h4>

<figure class='code'><figcaption><span>dynamicArrayTwoDimensional.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">findMax</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pRow</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pCol</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">pScore</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">maxSocre</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Please enter array size m,n:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d, %d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pScore</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span> <span class="n">calloc</span><span class="p">(</span><span class="n">m</span><span class="o">*</span><span class="n">n</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">pScore</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;No enough memory!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Please enter the score:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pScore</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">maxSocre</span> <span class="o">=</span> <span class="n">findMax</span><span class="p">(</span><span class="n">pScore</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">row</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">col</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;maxSocre = %d, class = %d, number = %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">maxSocre</span><span class="p">,</span> <span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">col</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">pScore</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">findMax</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pRow</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">pCol</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">max</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="o">*</span><span class="n">pRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">pCol</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">max</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">n</span><span class="o">+</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>              <span class="o">*</span><span class="n">pRow</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>              <span class="o">*</span><span class="n">pCol</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">max</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>github代码地址：<a href="https://github.com/yingbing/C">点我！！！</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://yingbing.github.io/blog/2014/12/27/regular-expression/"/>
    <updated>2014-12-27T10:45:09+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/12/27/regular-expression</id>
    <content type="html"><![CDATA[<h3>一、正则表达式概述</h3>

<p>学习一个东西，就要知道它的三个方面：<br/>
1、这是什么东西<br/>
2、它可以用来干什么<br/>
3、怎么用它</p>

<p>正则表达式是用来描述、匹配符合某个句法规则的字符串，可以用来检查字符串格式、搜索、替换一些符合某些规则的文本。</p>

<!--more-->


<h3>二、正则表达式怎么用</h3>

<p>正则表达式一般是用以下几种表字符来</p>

<h4>1、特殊字符</h4>

<p>正则表达式中一共有12个特殊字符，分别为：<code>[</code> <code>]</code> <code>\</code> <code>^</code> <code>$</code> <code>.</code> <code>|</code> <code>?</code> <code>*</code> <code>+</code> <code>(</code> <code>)</code><br/>
这些字符如果需要用作文本符的话，则需要使用转义字符，这些字符的含义：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">字符 </th>
<th style="text-align:left;"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">[ </td>
<td style="text-align:left;">字符集合开始</td>
</tr>
<tr>
<td style="text-align:center;">] </td>
<td style="text-align:left;">字符集合结束</td>
</tr>
<tr>
<td style="text-align:center;">( </td>
<td style="text-align:left;">分组左括号</td>
</tr>
<tr>
<td style="text-align:center;">) </td>
<td style="text-align:left;">分组右括号</td>
</tr>
<tr>
<td style="text-align:center;">\ </td>
<td style="text-align:left;">转义</td>
</tr>
<tr>
<td style="text-align:center;">^ </td>
<td style="text-align:left;">匹配字符串的开始（取反）</td>
</tr>
<tr>
<td style="text-align:center;">$ </td>
<td style="text-align:left;">匹配字符串的结束</td>
</tr>
<tr>
<td style="text-align:center;">. </td>
<td style="text-align:left;">匹配除换行符以外的任意字符</td>
</tr>
<tr>
<td style="text-align:center;"></td>
<td style="text-align:left;"> </td>
</tr>
<tr>
<td style="text-align:center;">? </td>
<td style="text-align:left;">重复零次或一次</td>
</tr>
<tr>
<td style="text-align:center;">* </td>
<td style="text-align:left;">重复零次或更多次</td>
</tr>
<tr>
<td style="text-align:center;">+ </td>
<td style="text-align:left;">重复一次或更多次</td>
</tr>
</tbody>
</table>


<p>这些字符分别代表什么意思，后面会一个一个地讲。</p>

<h4>2、元字符</h4>

<h4>3、转义字符</h4>

<h4>4、</h4>

<p>写到一半，有空再补上吧，实在不好意思，因为强迫症就先推上来咯。</p>

<table>
<thead>
<tr>
<th style="text-align:left;">左对齐表头 </th>
<th style="text-align:center;"> 中间对齐表头 </th>
<th style="text-align:right;"> 右对齐表头</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">左对齐数据 </td>
<td style="text-align:center;">中间对齐数据  </td>
<td style="text-align:right;">右对齐数据</td>
</tr>
<tr>
<td style="text-align:left;">第二行数据 </td>
<td style="text-align:center;">也是第二行    </td>
<td style="text-align:right;">还是第二行</td>
</tr>
<tr>
<td style="text-align:left;">懒得写了&hellip;</td>
<td style="text-align:center;">&hellip;..         </td>
<td style="text-align:right;">&hellip;..</td>
</tr>
<tr>
<td style="text-align:left;">长数据，以便看出表头的对齐</td>
<td style="text-align:center;">长数据，以便看出表头的对齐</td>
<td style="text-align:right;">长数据，以便看出表头的对齐</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法第三章 插入排序]]></title>
    <link href="http://yingbing.github.io/blog/2014/12/12/insertion-sort/"/>
    <updated>2014-12-12T14:45:36+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/12/12/insertion-sort</id>
    <content type="html"><![CDATA[<p>从现在开始，我会尝试用我自己的话来表达一些算法，如果说得不好，请见谅。</p>

<p>插入排序主要步骤分为以下几部分：<br/>
1、从第2个元素开始把元素一个一个拿出来<br/>
2、把拿出来的元素从后向前一个一个比较，如果被比较的数大于拿出来的元素，则被比较的数向后移一位<br/>
3、当拿出来的元素小于等于被比较数时，把拿出来的元素存入被比较数的下一个位置</p>

<!--more-->


<p>以上就是插入排序啦，附上图片一张，并贴上wiki的链接： <a href="http://en.wikipedia.org/wiki/Insertion_sort">http://en.wikipedia.org/wiki/Insertion_sort</a>
最后附上一张排序图（图片来自wiki）:</p>

<p><img src="http://yingbing.github.io/images/2014-12-12-insertion-sort/1.gif"></p>

<figure class='code'><figcaption><span>InsertionSort.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InsertionSort</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">45</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">87</span><span class="o">,</span><span class="mi">34</span><span class="o">,</span><span class="mi">65</span><span class="o">};</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">a</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">InsertionSort</span><span class="o">().</span><span class="na">excute</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">a</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">excute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">){</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span><span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="o">){</span>
</span><span class='line'>                <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                <span class="n">j</span><span class="o">--;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法第二章 快速排序]]></title>
    <link href="http://yingbing.github.io/blog/2014/12/12/quick-sort/"/>
    <updated>2014-12-12T14:39:21+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/12/12/quick-sort</id>
    <content type="html"><![CDATA[<p>先把快速排序的代码实现贴上来，太晚了，过程改天再加上！！！</p>

<p>快速排序就是把一个数拿出来，然后把小于这个数的扔到一边，把大于它的扔到一边，那这个数就在正确的位置上了,然后把这个数的左边分成一份，右边分成一份，再把这两份进行刚才的做法，一直不停地这样做，直到不能再分。</p>

<!--more-->


<p>接下来就要说明怎么把小于它的数扔到一边，大于它的数扔到一边<br/>
1、拿出第一个数temp，那第一个数的位置就空了出来<br/>
2、从后向前找，找到小于temp的数，记住位置i，把小于temp的数扔到刚才空出来的位置，那 i 的位置又空了出来，<br/>
3、从前向后找，找到大于temp的数，记住位置j，把大于temp的数扔到刚才空出来的位置，那 j 的位置又空了出来，<br/>
4、重复2，3，直到向前找跟向后找相遇，把temp放在相遇的位置
5、把数组从这个数的位置分成两部分，分别进行1，2，3，4，做完不能再做的时候就停了，^ _ ^</p>

<p>老规矩，附上wiki的地址： <a href="http://en.wikipedia.org/wiki/Quicksort">http://en.wikipedia.org/wiki/Quicksort</a>
再附上两张排序的图片（来自wiki）：</p>

<p><img src="http://yingbing.github.io/images/2014-12-12-quick-sort/1.png"><br/>
<img src="http://yingbing.github.io/images/2014-12-12-quick-sort/2.png"></p>

<figure class='code'><figcaption><span>Quicksort.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Quicksort</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">45</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">87</span><span class="o">,</span> <span class="mi">34</span><span class="o">,</span> <span class="mi">65</span> <span class="o">};</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Quicksort</span><span class="o">().</span><span class="na">excute</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">excute</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">left</span><span class="o">],</span> <span class="n">l</span> <span class="o">=</span> <span class="n">left</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">r</span><span class="o">--;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">a</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">l</span><span class="o">++;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">temp</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">l</span><span class="o">++;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">a</span><span class="o">[</span><span class="n">r</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">l</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">r</span><span class="o">--;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">a</span><span class="o">[</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
</span><span class='line'>            <span class="n">excute</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="n">excute</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法 第一章 冒泡排序]]></title>
    <link href="http://yingbing.github.io/blog/2014/12/12/bubble-sort/"/>
    <updated>2014-12-12T14:17:13+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/12/12/bubble-sort</id>
    <content type="html"><![CDATA[<p>今天把博客几篇博客从csdn搬过来</p>

<p>主要是把几个算法的搬过来
其它的就不搬了，第一搬的成本太高，第二搬了也没有什么用，所以其它的就放着了.</p>

<!--more-->


<p>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-我是分隔线&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>以前太浮躁了，都不知道要低调，所有写的代码都是为了装13，现在发现自己的基础实太差了，开始重头开始学习大学的课程。<br/>
有人说，你工作的时候上司会叫你定排序算法吗？也许是不会，但是如果基咄都不好的话，是没有办法往深层次地去发展的。<br/>
我不知道谁说的代码是一碗青春饭，谁是这个谣言的始作俑者我也不想知道，但是这个谣言的结果就是所有的程序员都想要去转管理，没有办法把心思放在提高代码的质量上。<br/>
我也很想搞acm，因为acm不仅可以锻炼思维，也可以培养抽象的能力。不过这一切都不算太晚，现在开始咯。<br/>
你认为最迟的时候恰恰是最早的时候！</p>

<p>冒泡排序的算法简单我就不想说了，这是wiki的简介：<a href="http://en.wikipedia.org/wiki/Bubble_sort">http://en.wikipedia.org/wiki/Bubble_sort</a>
另外附上两幅图片（来自wiki）:</p>

<p><img src="http://yingbing.github.io/images/2014-12-12-bubble-sort/1.gif"><br/>
<img src="http://yingbing.github.io/images/2014-12-12-bubble-sort/2.gif"></p>

<figure class='code'><figcaption><span>BubbleSort.java </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BubbleSort</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">45</span><span class="o">,</span><span class="mi">23</span><span class="o">,</span><span class="mi">87</span><span class="o">,</span><span class="mi">34</span><span class="o">,</span><span class="mi">65</span><span class="o">};</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">a</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">BubbleSort</span><span class="o">().</span><span class="na">excute</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="nl">i:</span><span class="n">a</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">excute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]=</span><span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                    <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">]=</span><span class="n">temp</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法概述]]></title>
    <link href="http://yingbing.github.io/blog/2014/12/12/algorithmns-overview/"/>
    <updated>2014-12-12T11:32:47+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/12/12/algorithmns-overview</id>
    <content type="html"><![CDATA[<p>算法是一门特别有趣有学科，我并不想去深究它的概念，就贴一下wiki吧：<br/>
<a href="http://en.wikipedia.org/wiki/Algorithm">http://en.wikipedia.org/wiki/Algorithm</a></p>

<p>写这篇文章就为了记录一下我已经了解的算法分类，也算是一个目录吧</p>

<!--more-->


<p>经典的算法分类：<br/>
1、分治算法<br/>
2、动态规划算法<br/>
3、回溯法<br/>
4、贪心算法<br/>
5、分支限界算法<br/>
6、balabala（如果我的知识可以让我了解到更多再补充）</p>

<p>排序算法列表：<br/>
1、冒泡排序  <a href="http://yingbing.github.io/blog/2014/12/12/bubble-sort/">http://yingbing.github.io/blog/2014/12/12/bubble-sort/</a> <br/>
2、快速排序  <a href="http://yingbing.github.io/blog/2014/12/12/quick-sort/">http://yingbing.github.io/blog/2014/12/12/quick-sort/</a> <br/>
3、插入排序  <a href="http://yingbing.github.io/blog/2014/12/12/insertion-sort/">http://yingbing.github.io/blog/2014/12/12/insertion-sort/</a> <br/>
4、选择排序<br/>
5、希尔排序<br/>
6、归并排序<br/>
7、堆排序<br/>
8、计数排序<br/>
9、桶排序<br/>
10、基数排序<br/>
11、balabala(其它的排序再说吧)</p>

<p>再说一下其它的一些经典算法吧：<br/>
1、树数<br/>
2、图<br/>
3、待续</p>

<p>23种设计模式：</p>

<p>学算法，计算算法复杂度还是需要的，所以再学一些数学吧</p>

<p>参考文档：<br/>
白话经典算法系列：<a href="http://blog.csdn.net/column/details/algorithm-easyword.html">http://blog.csdn.net/column/details/algorithm-easyword.html</a>  <br/>
五大经典算法：<a href="http://www.cnblogs.com/steven_oyj/category/246990.html">http://www.cnblogs.com/steven_oyj/category/246990.html</a>  <br/>
结构之法 算法之道 <a href="http://blog.csdn.net/v_july_v">http://blog.csdn.net/v_july_v</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博客]]></title>
    <link href="http://yingbing.github.io/blog/2014/11/28/test-blog/"/>
    <updated>2014-11-28T16:49:23+08:00</updated>
    <id>http://yingbing.github.io/blog/2014/11/28/test-blog</id>
    <content type="html"><![CDATA[<h2>一、测试文字</h2>

<p>这是我的第一篇Octopress博客<br/>
很不错的样子哦<br/>
感觉可以用</p>

<!--more-->


<h2>二、测试代码</h2>

<p>1、带文件名的代码</p>

<figure class='code'><figcaption><span>Javascript Array Syntax </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">arrayLength</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">element0</span><span class="p">,</span> <span class="nx">element1</span><span class="p">,</span> <span class="p">...,</span> <span class="nx">elementN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、不带文件名的代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;Hello World!!!&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、不带行号和高亮的代码</p>

<pre><code>System.out.print("Hello World!!!");
</code></pre>

<p>4、普通代码块：<code>Octopress</code></p>

<h2>三、测试图片</h2>

<p>1、纯图片<br/>
<img src="http://yingbing.github.io/images/2014-11-28-test-blog/1.JPG" width="200"></p>

<p>2、带<code>title</code><br/>
<img src="http://yingbing.github.io/images/2014-11-28-test-blog/2.JPG" width="200" title="杀生丸" ></p>

<p>3、自定义宽度<br/>
<img src="http://yingbing.github.io/images/2014-11-28-test-blog/3.JPG" width="200"></p>

<p>没有设置宽度实难看，都设置了宽度= =|</p>

<!--
4、自定义`alt`和`title`  
![Alt文本](/images/2014-11-28-test-blog/3.JPG "title文本")
 -->


<h2>四、测试链接</h2>

<p><a href="http://yingbing.github.io/">http://yingbing.github.io/</a></p>

<p><a href="http://yingbing.github.io">ICE</a></p>

<h2>五、测试表格</h2>

<table>
<thead>
<tr>
<th style="text-align:left;">左对齐表头 </th>
<th style="text-align:center;"> 中间对齐表头 </th>
<th style="text-align:right;"> 右对齐表头</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">左对齐数据 </td>
<td style="text-align:center;">中间对齐数据  </td>
<td style="text-align:right;">右对齐数据</td>
</tr>
<tr>
<td style="text-align:left;">第二行数据 </td>
<td style="text-align:center;">也是第二行    </td>
<td style="text-align:right;">还是第二行</td>
</tr>
<tr>
<td style="text-align:left;">懒得写了&hellip;</td>
<td style="text-align:center;">&hellip;..         </td>
<td style="text-align:right;">&hellip;..</td>
</tr>
<tr>
<td style="text-align:left;">长数据，以便看出表头的对齐</td>
<td style="text-align:center;">长数据，以便看出表头的对齐</td>
<td style="text-align:right;">长数据，以便看出表头的对齐</td>
</tr>
</tbody>
</table>


<h2>六、总结</h2>

<p>这也算是基本的markdown语法熟悉^ _ ^</p>

<p>多说弄不好，评论系统还是用disqus。</p>

<p>踏实地学习吧，博客只是用来记录学习的过程。</p>

<p>庸人常立志：从现在开始要卯足火力学习了！！！</p>
]]></content>
  </entry>
  
</feed>
