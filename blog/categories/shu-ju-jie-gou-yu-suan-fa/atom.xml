<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数据结构与算法 | 薛映冰的代码狂躁症]]></title>
  <link href="http://yingbing.github.io/blog/categories/shu-ju-jie-gou-yu-suan-fa/atom.xml" rel="self"/>
  <link href="http://yingbing.github.io/"/>
  <updated>2015-02-11T17:46:26+08:00</updated>
  <id>http://yingbing.github.io/</id>
  <author>
    <name><![CDATA[ICE]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[链表]]></title>
    <link href="http://yingbing.github.io/blog/2015/02/11/linked-list-in-c/"/>
    <updated>2015-02-11T17:08:00+08:00</updated>
    <id>http://yingbing.github.io/blog/2015/02/11/linked-list-in-c</id>
    <content type="html"><![CDATA[<h3>一、什么是链表</h3>

<p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。</p>

<p>结构如下图：  <br/>
<img src="/images/2015-02-11-linked-list-in-c/1.png" width="500"></p>

<p>附上wiki链接：<a href="http://en.wikipedia.org/wiki/Linked_list">Linked List</a>  (为什么发英文的呢，因为我看不懂)</p>

<!-- more -->


<h3>二、链表特点</h3>

<p>链表相对于数组链表的优点是，数组大小可变，插入、删除速度蛮快，但是查找的效率却不如数组链表。</p>

<p>结构上： <br/>
1、每一个元素都有指针next指向下一下元素 <br/>
2、最后一个元素的next为NULL <br/>
<img src="/images/2015-02-11-linked-list-in-c/2.png" width="500"></p>

<h3>三、链表操作</h3>

<p>1、删除 <br/>
<img src="/images/2015-02-11-linked-list-in-c/3.png" width="500"></p>

<p>2、插入 <br/>
<img src="/images/2015-02-11-linked-list-in-c/4.png" width="500"></p>

<h3>四、实现</h3>

<p>不说了，好累，上代码： <br/>
<figure class='code'><figcaption><span>list.h </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ElementType</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">ifndef</span> <span class="n">_List_H</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">_List_H</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">Node</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Node</span><span class="o">*</span> <span class="n">PtrToNode</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">List</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">PtrToNode</span> <span class="n">Position</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">List</span> <span class="n">MakeEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">IsLast</span><span class="p">(</span><span class="n">Position</span> <span class="n">p</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Find</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">,</span> <span class="n">Position</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">DeleteList</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Header</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">First</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'><span class="n">Position</span> <span class="nf">Advance</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">);</span>
</span><span class='line'><span class="n">ElementType</span> <span class="nf">Retrieve</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">endif</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">struct</span> <span class="n">Node</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">ElementType</span> <span class="n">Element</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span>list.c </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fatal</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">list</span><span class="p">.</span><span class="n">h</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">FindPrevious</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">List</span> <span class="n">MakeEmpty</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">L</span> <span class="o">!=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">DeleteList</span><span class="p">(</span><span class="n">L</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">L</span> <span class="o">=</span> <span class="p">(</span><span class="n">List</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">L</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">FatalError</span><span class="p">(</span><span class="s">&quot;Out of memory!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">L</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">IsEmpty</span><span class="p">(</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">IsLast</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">Find</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>    <span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">while</span><span class="p">(</span><span class="n">P</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Element</span> <span class="o">!=</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">P</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">Delete</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">P</span><span class="p">,</span> <span class="n">TmpCell</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">P</span> <span class="o">=</span> <span class="n">FindPrevious</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">L</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">IsLast</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">L</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">TmpCell</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">TmpCell</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">TmpCell</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">FindPrevious</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">P</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">!=</span><span class="nb">NULL</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Element</span> <span class="o">!=</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="n">P</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">Insert</span><span class="p">(</span><span class="n">ElementType</span> <span class="n">X</span><span class="p">,</span> <span class="n">List</span> <span class="n">L</span><span class="p">,</span> <span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">TmpCell</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">TmpCell</span> <span class="o">=</span> <span class="p">(</span><span class="n">Position</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">Node</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">TmpCell</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="n">FatalError</span><span class="p">(</span><span class="s">&quot;Out of space!!!&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TmpCell</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Element</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'><span class="n">TmpCell</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">=</span> <span class="n">TmpCell</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">DeleteList</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Position</span> <span class="n">P</span> <span class="p">,</span> <span class="n">Tmp</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">P</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="n">L</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span> <span class="n">P</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Tmp</span> <span class="o">=</span> <span class="n">P</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span> <span class="n">P</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">P</span> <span class="o">=</span> <span class="n">Tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">Header</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">First</span><span class="p">(</span><span class="n">List</span> <span class="n">L</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Position</span> <span class="n">Advance</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ElementType</span> <span class="n">Retrieve</span><span class="p">(</span><span class="n">Position</span> <span class="n">P</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">P</span><span class="o">-&gt;</span><span class="n">Element</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>附上github代码地址：<a href="https://github.com/yingbing/DS-a-AA/tree/master/list">here</a></p>
]]></content>
  </entry>
  
</feed>
